services:
  pg:
    container_name: pg_grafana
    image: postgres:17.4-alpine
    env_file: "./.env"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - grafana-data:/var/lib/postgresql/data
    expose: 
      - 5432
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U habrpguser -d habrdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: "0:0"
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: pg:5432
      GF_DATABASE_NAME: ${POSTGRES_DB}
      GF_DATABASE_USER: ${POSTGRES_USER}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      GF_DATABASE_SSL_MODE: disable
      GF_RENDERING_SERVER_URL: "http://grafana-image-renderer:8081/render"
      GF_RENDERING_CALLBACK_URL: "http://grafana:3000/"
      GF_UNIFIED_ALERTING_SCREENSHOTS_CAPTURE: "true"
      GF_LOG_FILTERS: "rendering:debug"
    volumes:
      - ./.runtime/grafana-config:/etc/grafana
      - grafana:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      pg:
        condition: service_healthy
    ports:
      - 3111:3000
          
  grafana-image-renderer:
    image: "grafana/grafana-image-renderer:latest"
    environment:
      TZ: "Europe/Moscow"
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        order: start-first
      resources:
        limits:
          memory: 1024M
          
  prometheus:
    image: "prom/prometheus:latest"
    ports:
      - 9090:9090
    volumes:
      - ./.runtime/config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - ./.runtime/config/web-config.yaml:/etc/prometheus/web-config.yaml:ro
      - prometheus-data:/prometheus
    secrets:
     - node_exporter_password
     - grafana_prometheus_password
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--web.config.file=/etc/prometheus/web-config.yaml"
      - "--storage.tsdb.retention.time=7d"
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        order: stop-first
      resources:
        limits:
          memory: 1024M
          
  pushgateway:
    image: "prom/pushgateway:latest"
    ports:
      - 9091:9091
    volumes:
      - ./.runtime/config/web-config.yaml:/etc/prometheus/web-config.yaml:ro
    command:
      - "--web.config.file=/etc/prometheus/web-config.yaml"
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        order: start-first
      resources:
        limits:
          memory: 512M
          
  loki:
    image: "grafana/loki:latest"
    volumes:
      - ./.runtime/config/loki.yaml:/etc/loki/loki.yaml:ro
      - loki-data:/loki
    command: 
      - "--config.file=/etc/loki/loki.yaml"
    expose: 
      - 3100
    user: "root"
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        order: stop-first
      resources:
        limits:
          memory: 1024M
          
  promtail:
    image: "grafana/promtail:latest"
    volumes:
      - ./.runtime/config/promtail.yaml:/etc/promtail/promtail.yaml:ro
      - promtail-data:/var/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    environment:
      HOST_HOSTNAME: "{{.Node.Hostname}}"
    command:
      - "--config.file=/etc/promtail/promtail.yaml"
      - "--config.expand-env=true"
    deploy:
      mode: global
      update_config:
        order: stop-first
      resources:
        limits:
          memory: 512M

secrets:
 grafana_database_pass:
   file: ./.runtime/secret/grafana_database_pass
 node_exporter_password:
   file: ./.runtime/secret/node_exporter_pass
 grafana_prometheus_password:
   file: ./.runtime/secret/prometheus_pass

volumes:
  grafana-data:
    driver: local
  grafana:
    driver: local
  loki-data:
    driver: local
  promtail-data:
    driver: local
  prometheus-data:
    driver: local